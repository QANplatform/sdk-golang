/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseTransaction{}

// ResponseTransaction struct for ResponseTransaction
type ResponseTransaction struct {
	// A list of addresses and storage keys that the transaction plans to access
	AccessList *string `json:"AccessList,omitempty"`
	// The hash of the block where this transaction was in. Null when it's a pending transaction
	BlockHash *string `json:"BlockHash,omitempty"`
	// The block number where this transaction was in. Null when it's a pending transaction
	BlockNumber *string `json:"BlockNumber,omitempty"`
	// The chain id of the transaction, if any
	ChainId *string `json:"ChainId,omitempty"`
	// The address of the sender
	From *string `json:"From,omitempty"`
	// The gas provided by the sender, encoded as decimal
	Gas *string `json:"Gas,omitempty"`
	// The gas price provided by the sender in wei encoded as decimal
	GasPrice *string `json:"GasPrice,omitempty"`
	// The hash of the transaction
	Hash *string `json:"Hash,omitempty"`
	// The data sent along with the transaction
	Input *string `json:"Input,omitempty"`
	// The maximum fee per gas set in the transaction
	MaxFeePerGas *string `json:"MaxFeePerGas,omitempty"`
	// The maximum priority gas fee set in the transaction
	MaxPriorityFeePerGas *string `json:"MaxPriorityFeePerGas,omitempty"`
	// The number of transactions made by the sender prior to this one encoded as decimal
	Nonce *string `json:"Nonce,omitempty"`
	// The R field of the signature
	R *string `json:"R,omitempty"`
	// The S field of the signature
	S *string `json:"S,omitempty"`
	// The address of the receiver. Null when its a contract creation transaction
	To *string `json:"To,omitempty"`
	// The integer of the transaction's index position that the log was created from. Null when it's a pending log
	TransactionIndex *string `json:"TransactionIndex,omitempty"`
	// The transaction type
	Type *string `json:"Type,omitempty"`
	// The standardized V field of the signature
	V *string `json:"V,omitempty"`
	// The value transferred in wei encoded as decimal
	Value *string `json:"Value,omitempty"`
}

// NewResponseTransaction instantiates a new ResponseTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseTransaction() *ResponseTransaction {
	this := ResponseTransaction{}
	return &this
}

// NewResponseTransactionWithDefaults instantiates a new ResponseTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseTransactionWithDefaults() *ResponseTransaction {
	this := ResponseTransaction{}
	return &this
}

// GetAccessList returns the AccessList field value if set, zero value otherwise.
func (o *ResponseTransaction) GetAccessList() string {
	if o == nil || IsNil(o.AccessList) {
		var ret string
		return ret
	}
	return *o.AccessList
}

// GetAccessListOk returns a tuple with the AccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetAccessListOk() (*string, bool) {
	if o == nil || IsNil(o.AccessList) {
		return nil, false
	}
	return o.AccessList, true
}

// HasAccessList returns a boolean if a field has been set.
func (o *ResponseTransaction) HasAccessList() bool {
	if o != nil && !IsNil(o.AccessList) {
		return true
	}

	return false
}

// SetAccessList gets a reference to the given string and assigns it to the AccessList field.
func (o *ResponseTransaction) SetAccessList(v string) {
	o.AccessList = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *ResponseTransaction) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *ResponseTransaction) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *ResponseTransaction) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *ResponseTransaction) GetBlockNumber() string {
	if o == nil || IsNil(o.BlockNumber) {
		var ret string
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetBlockNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *ResponseTransaction) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given string and assigns it to the BlockNumber field.
func (o *ResponseTransaction) SetBlockNumber(v string) {
	o.BlockNumber = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *ResponseTransaction) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *ResponseTransaction) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *ResponseTransaction) SetChainId(v string) {
	o.ChainId = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ResponseTransaction) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ResponseTransaction) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ResponseTransaction) SetFrom(v string) {
	o.From = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *ResponseTransaction) GetGas() string {
	if o == nil || IsNil(o.Gas) {
		var ret string
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetGasOk() (*string, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *ResponseTransaction) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given string and assigns it to the Gas field.
func (o *ResponseTransaction) SetGas(v string) {
	o.Gas = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *ResponseTransaction) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *ResponseTransaction) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *ResponseTransaction) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ResponseTransaction) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ResponseTransaction) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ResponseTransaction) SetHash(v string) {
	o.Hash = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ResponseTransaction) GetInput() string {
	if o == nil || IsNil(o.Input) {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetInputOk() (*string, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ResponseTransaction) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *ResponseTransaction) SetInput(v string) {
	o.Input = &v
}

// GetMaxFeePerGas returns the MaxFeePerGas field value if set, zero value otherwise.
func (o *ResponseTransaction) GetMaxFeePerGas() string {
	if o == nil || IsNil(o.MaxFeePerGas) {
		var ret string
		return ret
	}
	return *o.MaxFeePerGas
}

// GetMaxFeePerGasOk returns a tuple with the MaxFeePerGas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetMaxFeePerGasOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFeePerGas) {
		return nil, false
	}
	return o.MaxFeePerGas, true
}

// HasMaxFeePerGas returns a boolean if a field has been set.
func (o *ResponseTransaction) HasMaxFeePerGas() bool {
	if o != nil && !IsNil(o.MaxFeePerGas) {
		return true
	}

	return false
}

// SetMaxFeePerGas gets a reference to the given string and assigns it to the MaxFeePerGas field.
func (o *ResponseTransaction) SetMaxFeePerGas(v string) {
	o.MaxFeePerGas = &v
}

// GetMaxPriorityFeePerGas returns the MaxPriorityFeePerGas field value if set, zero value otherwise.
func (o *ResponseTransaction) GetMaxPriorityFeePerGas() string {
	if o == nil || IsNil(o.MaxPriorityFeePerGas) {
		var ret string
		return ret
	}
	return *o.MaxPriorityFeePerGas
}

// GetMaxPriorityFeePerGasOk returns a tuple with the MaxPriorityFeePerGas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetMaxPriorityFeePerGasOk() (*string, bool) {
	if o == nil || IsNil(o.MaxPriorityFeePerGas) {
		return nil, false
	}
	return o.MaxPriorityFeePerGas, true
}

// HasMaxPriorityFeePerGas returns a boolean if a field has been set.
func (o *ResponseTransaction) HasMaxPriorityFeePerGas() bool {
	if o != nil && !IsNil(o.MaxPriorityFeePerGas) {
		return true
	}

	return false
}

// SetMaxPriorityFeePerGas gets a reference to the given string and assigns it to the MaxPriorityFeePerGas field.
func (o *ResponseTransaction) SetMaxPriorityFeePerGas(v string) {
	o.MaxPriorityFeePerGas = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *ResponseTransaction) GetNonce() string {
	if o == nil || IsNil(o.Nonce) {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetNonceOk() (*string, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *ResponseTransaction) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *ResponseTransaction) SetNonce(v string) {
	o.Nonce = &v
}

// GetR returns the R field value if set, zero value otherwise.
func (o *ResponseTransaction) GetR() string {
	if o == nil || IsNil(o.R) {
		var ret string
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetROk() (*string, bool) {
	if o == nil || IsNil(o.R) {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *ResponseTransaction) HasR() bool {
	if o != nil && !IsNil(o.R) {
		return true
	}

	return false
}

// SetR gets a reference to the given string and assigns it to the R field.
func (o *ResponseTransaction) SetR(v string) {
	o.R = &v
}

// GetS returns the S field value if set, zero value otherwise.
func (o *ResponseTransaction) GetS() string {
	if o == nil || IsNil(o.S) {
		var ret string
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetSOk() (*string, bool) {
	if o == nil || IsNil(o.S) {
		return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *ResponseTransaction) HasS() bool {
	if o != nil && !IsNil(o.S) {
		return true
	}

	return false
}

// SetS gets a reference to the given string and assigns it to the S field.
func (o *ResponseTransaction) SetS(v string) {
	o.S = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ResponseTransaction) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ResponseTransaction) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ResponseTransaction) SetTo(v string) {
	o.To = &v
}

// GetTransactionIndex returns the TransactionIndex field value if set, zero value otherwise.
func (o *ResponseTransaction) GetTransactionIndex() string {
	if o == nil || IsNil(o.TransactionIndex) {
		var ret string
		return ret
	}
	return *o.TransactionIndex
}

// GetTransactionIndexOk returns a tuple with the TransactionIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetTransactionIndexOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionIndex) {
		return nil, false
	}
	return o.TransactionIndex, true
}

// HasTransactionIndex returns a boolean if a field has been set.
func (o *ResponseTransaction) HasTransactionIndex() bool {
	if o != nil && !IsNil(o.TransactionIndex) {
		return true
	}

	return false
}

// SetTransactionIndex gets a reference to the given string and assigns it to the TransactionIndex field.
func (o *ResponseTransaction) SetTransactionIndex(v string) {
	o.TransactionIndex = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResponseTransaction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResponseTransaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResponseTransaction) SetType(v string) {
	o.Type = &v
}

// GetV returns the V field value if set, zero value otherwise.
func (o *ResponseTransaction) GetV() string {
	if o == nil || IsNil(o.V) {
		var ret string
		return ret
	}
	return *o.V
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetVOk() (*string, bool) {
	if o == nil || IsNil(o.V) {
		return nil, false
	}
	return o.V, true
}

// HasV returns a boolean if a field has been set.
func (o *ResponseTransaction) HasV() bool {
	if o != nil && !IsNil(o.V) {
		return true
	}

	return false
}

// SetV gets a reference to the given string and assigns it to the V field.
func (o *ResponseTransaction) SetV(v string) {
	o.V = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ResponseTransaction) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTransaction) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ResponseTransaction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ResponseTransaction) SetValue(v string) {
	o.Value = &v
}

func (o ResponseTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessList) {
		toSerialize["AccessList"] = o.AccessList
	}
	if !IsNil(o.BlockHash) {
		toSerialize["BlockHash"] = o.BlockHash
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["BlockNumber"] = o.BlockNumber
	}
	if !IsNil(o.ChainId) {
		toSerialize["ChainId"] = o.ChainId
	}
	if !IsNil(o.From) {
		toSerialize["From"] = o.From
	}
	if !IsNil(o.Gas) {
		toSerialize["Gas"] = o.Gas
	}
	if !IsNil(o.GasPrice) {
		toSerialize["GasPrice"] = o.GasPrice
	}
	if !IsNil(o.Hash) {
		toSerialize["Hash"] = o.Hash
	}
	if !IsNil(o.Input) {
		toSerialize["Input"] = o.Input
	}
	if !IsNil(o.MaxFeePerGas) {
		toSerialize["MaxFeePerGas"] = o.MaxFeePerGas
	}
	if !IsNil(o.MaxPriorityFeePerGas) {
		toSerialize["MaxPriorityFeePerGas"] = o.MaxPriorityFeePerGas
	}
	if !IsNil(o.Nonce) {
		toSerialize["Nonce"] = o.Nonce
	}
	if !IsNil(o.R) {
		toSerialize["R"] = o.R
	}
	if !IsNil(o.S) {
		toSerialize["S"] = o.S
	}
	if !IsNil(o.To) {
		toSerialize["To"] = o.To
	}
	if !IsNil(o.TransactionIndex) {
		toSerialize["TransactionIndex"] = o.TransactionIndex
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.V) {
		toSerialize["V"] = o.V
	}
	if !IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	return toSerialize, nil
}

type NullableResponseTransaction struct {
	value *ResponseTransaction
	isSet bool
}

func (v NullableResponseTransaction) Get() *ResponseTransaction {
	return v.value
}

func (v *NullableResponseTransaction) Set(val *ResponseTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTransaction(val *ResponseTransaction) *NullableResponseTransaction {
	return &NullableResponseTransaction{value: val, isSet: true}
}

func (v NullableResponseTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


