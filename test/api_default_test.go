/*
QAN AutoApi

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/qanplatform/sdk-golang"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService QanAccounts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanBlobBaseFee", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanBlobBaseFee(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanBlockNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanBlockNumber(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanChainId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanChainId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanEstimateGas", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanEstimateGas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanFeeHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanFeeHistory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGasPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanGasPrice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetAccount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var address string
		var blockReference string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetAccount(context.Background(), address, blockReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetBalance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var address string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetBalance(context.Background(), address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetBlockByHash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string
		var transactionDetailFlag bool

		resp, httpRes, err := apiClient.DefaultAPI.QanGetBlockByHash(context.Background(), hash, transactionDetailFlag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetBlockByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockNumber string
		var transactionDetailFlag bool

		resp, httpRes, err := apiClient.DefaultAPI.QanGetBlockByNumber(context.Background(), blockNumber, transactionDetailFlag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetBlockReceipts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockNumber string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetBlockReceipts(context.Background(), blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetBlockTransactionCountByHash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetBlockTransactionCountByHash(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetBlockTransactionCountByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockNumber string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetBlockTransactionCountByNumber(context.Background(), blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var address string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetCode(context.Background(), address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetFilterChanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var filterId string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetFilterChanges(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetFilterLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetFilterLogs(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanGetLogs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetProof", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanGetProof(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetStorageAt", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanGetStorageAt(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetTransactionByBlockHashAndIndex", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockHash string
		var index string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetTransactionByBlockHashAndIndex(context.Background(), blockHash, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetTransactionByBlockNumberAndIndex", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockNumber string
		var index string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetTransactionByBlockNumberAndIndex(context.Background(), blockNumber, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetTransactionByHash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetTransactionByHash(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetTransactionCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var address string
		var blockNumber string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetTransactionCount(context.Background(), address, blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetTransactionReceipt", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetTransactionReceipt(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetUncleCountByBlockHash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetUncleCountByBlockHash(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanGetUncleCountByBlockNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockNumber string

		resp, httpRes, err := apiClient.DefaultAPI.QanGetUncleCountByBlockNumber(context.Background(), blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanMaxPriorityFeePerGas", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanMaxPriorityFeePerGas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanNewBlockFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanNewBlockFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanNewFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanNewFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanNewPendingTransactionFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanNewPendingTransactionFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanSendRawTransaction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanSendRawTransaction(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanSubscribe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanSubscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanSyncing", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanSyncing(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanUninstallFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var filterId string

		resp, httpRes, err := apiClient.DefaultAPI.QanUninstallFilter(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanUnsubscribe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subscriptionId string

		resp, httpRes, err := apiClient.DefaultAPI.QanUnsubscribe(context.Background(), subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QanXlinkValid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.QanXlinkValid(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
