/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EstimateGasObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimateGasObject{}

// EstimateGasObject struct for EstimateGasObject
type EstimateGasObject struct {
	// Fake balance to set for the account before executing the call
	Balance *string `json:"Balance,omitempty"`
	// Fake EVM bytecode to inject into the account before executing the call
	Code *int32 `json:"Code,omitempty"`
	// Fake nonce to set for the account before executing the call
	Nonce *string `json:"Nonce,omitempty"`
	// Fake key-value mapping to override all slots in the account storage before executing the call
	State *string `json:"State,omitempty"`
	// Fake key-value mapping to override individual slots in the account storage before executing the call
	StateDiff *string `json:"StateDiff,omitempty"`
}

// NewEstimateGasObject instantiates a new EstimateGasObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateGasObject() *EstimateGasObject {
	this := EstimateGasObject{}
	return &this
}

// NewEstimateGasObjectWithDefaults instantiates a new EstimateGasObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateGasObjectWithDefaults() *EstimateGasObject {
	this := EstimateGasObject{}
	return &this
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *EstimateGasObject) GetBalance() string {
	if o == nil || IsNil(o.Balance) {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateGasObject) GetBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *EstimateGasObject) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *EstimateGasObject) SetBalance(v string) {
	o.Balance = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EstimateGasObject) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateGasObject) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EstimateGasObject) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *EstimateGasObject) SetCode(v int32) {
	o.Code = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *EstimateGasObject) GetNonce() string {
	if o == nil || IsNil(o.Nonce) {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateGasObject) GetNonceOk() (*string, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *EstimateGasObject) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *EstimateGasObject) SetNonce(v string) {
	o.Nonce = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EstimateGasObject) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateGasObject) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EstimateGasObject) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EstimateGasObject) SetState(v string) {
	o.State = &v
}

// GetStateDiff returns the StateDiff field value if set, zero value otherwise.
func (o *EstimateGasObject) GetStateDiff() string {
	if o == nil || IsNil(o.StateDiff) {
		var ret string
		return ret
	}
	return *o.StateDiff
}

// GetStateDiffOk returns a tuple with the StateDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateGasObject) GetStateDiffOk() (*string, bool) {
	if o == nil || IsNil(o.StateDiff) {
		return nil, false
	}
	return o.StateDiff, true
}

// HasStateDiff returns a boolean if a field has been set.
func (o *EstimateGasObject) HasStateDiff() bool {
	if o != nil && !IsNil(o.StateDiff) {
		return true
	}

	return false
}

// SetStateDiff gets a reference to the given string and assigns it to the StateDiff field.
func (o *EstimateGasObject) SetStateDiff(v string) {
	o.StateDiff = &v
}

func (o EstimateGasObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimateGasObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Balance) {
		toSerialize["Balance"] = o.Balance
	}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.Nonce) {
		toSerialize["Nonce"] = o.Nonce
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.StateDiff) {
		toSerialize["StateDiff"] = o.StateDiff
	}
	return toSerialize, nil
}

type NullableEstimateGasObject struct {
	value *EstimateGasObject
	isSet bool
}

func (v NullableEstimateGasObject) Get() *EstimateGasObject {
	return v.value
}

func (v *NullableEstimateGasObject) Set(val *EstimateGasObject) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateGasObject) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateGasObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateGasObject(val *EstimateGasObject) *NullableEstimateGasObject {
	return &NullableEstimateGasObject{value: val, isSet: true}
}

func (v NullableEstimateGasObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateGasObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


