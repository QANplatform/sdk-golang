/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseWithdrawals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseWithdrawals{}

// ResponseWithdrawals struct for ResponseWithdrawals
type ResponseWithdrawals struct {
	// The address to which the withdrawn amount is sent
	Address string `json:"Address"`
	// The amount of ether, provided in decimal format, corresponding to a certain value in gwei
	Amount string `json:"Amount"`
	// The index of the withdrawal to uniquely identify each withdrawal
	Index int32 `json:"Index"`
	// The index of the validator who initiated the withdrawal
	ValidatorIndex int32 `json:"ValidatorIndex"`
}

type _ResponseWithdrawals ResponseWithdrawals

// NewResponseWithdrawals instantiates a new ResponseWithdrawals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseWithdrawals(address string, amount string, index int32, validatorIndex int32) *ResponseWithdrawals {
	this := ResponseWithdrawals{}
	this.Address = address
	this.Amount = amount
	this.Index = index
	this.ValidatorIndex = validatorIndex
	return &this
}

// NewResponseWithdrawalsWithDefaults instantiates a new ResponseWithdrawals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithdrawalsWithDefaults() *ResponseWithdrawals {
	this := ResponseWithdrawals{}
	return &this
}

// GetAddress returns the Address field value
func (o *ResponseWithdrawals) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *ResponseWithdrawals) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *ResponseWithdrawals) SetAddress(v string) {
	o.Address = v
}

// GetAmount returns the Amount field value
func (o *ResponseWithdrawals) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ResponseWithdrawals) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ResponseWithdrawals) SetAmount(v string) {
	o.Amount = v
}

// GetIndex returns the Index field value
func (o *ResponseWithdrawals) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ResponseWithdrawals) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *ResponseWithdrawals) SetIndex(v int32) {
	o.Index = v
}

// GetValidatorIndex returns the ValidatorIndex field value
func (o *ResponseWithdrawals) GetValidatorIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ValidatorIndex
}

// GetValidatorIndexOk returns a tuple with the ValidatorIndex field value
// and a boolean to check if the value has been set.
func (o *ResponseWithdrawals) GetValidatorIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorIndex, true
}

// SetValidatorIndex sets field value
func (o *ResponseWithdrawals) SetValidatorIndex(v int32) {
	o.ValidatorIndex = v
}

func (o ResponseWithdrawals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseWithdrawals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Address"] = o.Address
	toSerialize["Amount"] = o.Amount
	toSerialize["Index"] = o.Index
	toSerialize["ValidatorIndex"] = o.ValidatorIndex
	return toSerialize, nil
}

func (o *ResponseWithdrawals) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Address",
		"Amount",
		"Index",
		"ValidatorIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseWithdrawals := _ResponseWithdrawals{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseWithdrawals)

	if err != nil {
		return err
	}

	*o = ResponseWithdrawals(varResponseWithdrawals)

	return err
}

type NullableResponseWithdrawals struct {
	value *ResponseWithdrawals
	isSet bool
}

func (v NullableResponseWithdrawals) Get() *ResponseWithdrawals {
	return v.value
}

func (v *NullableResponseWithdrawals) Set(val *ResponseWithdrawals) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseWithdrawals) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseWithdrawals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseWithdrawals(val *ResponseWithdrawals) *NullableResponseWithdrawals {
	return &NullableResponseWithdrawals{value: val, isSet: true}
}

func (v NullableResponseWithdrawals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseWithdrawals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


