/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InputGetLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputGetLogs{}

// InputGetLogs struct for InputGetLogs
type InputGetLogs struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// The contract address or a list of addresses from which logs should originate
	Address *string `json:"Address,omitempty"`
	// With the addition of EIP-234, blockHash is a new filter option that restricts the logs returned to the block number referenced in the blockHash. Using the blockHash field is equivalent to setting the fromBlock and toBlock to the block number the blockHash references. If blockHash is present in the filter criteria, neither fromBlock nor toBlock is allowed
	BlockHash *string `json:"BlockHash,omitempty"`
	// The block number as a string in decimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
	FromBlock *string `json:"FromBlock,omitempty"`
	// The block number as a string in decimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
	ToBlock *string `json:"ToBlock,omitempty"`
	// An array of DATA topics and also, the topics are order-dependent. Visit this official page to learn more about topics
	Topics []string `json:"Topics,omitempty"`
}

// NewInputGetLogs instantiates a new InputGetLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputGetLogs() *InputGetLogs {
	this := InputGetLogs{}
	return &this
}

// NewInputGetLogsWithDefaults instantiates a new InputGetLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputGetLogsWithDefaults() *InputGetLogs {
	this := InputGetLogs{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *InputGetLogs) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputGetLogs) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *InputGetLogs) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *InputGetLogs) SetSchema(v string) {
	o.Schema = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *InputGetLogs) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputGetLogs) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *InputGetLogs) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *InputGetLogs) SetAddress(v string) {
	o.Address = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *InputGetLogs) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputGetLogs) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *InputGetLogs) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *InputGetLogs) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetFromBlock returns the FromBlock field value if set, zero value otherwise.
func (o *InputGetLogs) GetFromBlock() string {
	if o == nil || IsNil(o.FromBlock) {
		var ret string
		return ret
	}
	return *o.FromBlock
}

// GetFromBlockOk returns a tuple with the FromBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputGetLogs) GetFromBlockOk() (*string, bool) {
	if o == nil || IsNil(o.FromBlock) {
		return nil, false
	}
	return o.FromBlock, true
}

// HasFromBlock returns a boolean if a field has been set.
func (o *InputGetLogs) HasFromBlock() bool {
	if o != nil && !IsNil(o.FromBlock) {
		return true
	}

	return false
}

// SetFromBlock gets a reference to the given string and assigns it to the FromBlock field.
func (o *InputGetLogs) SetFromBlock(v string) {
	o.FromBlock = &v
}

// GetToBlock returns the ToBlock field value if set, zero value otherwise.
func (o *InputGetLogs) GetToBlock() string {
	if o == nil || IsNil(o.ToBlock) {
		var ret string
		return ret
	}
	return *o.ToBlock
}

// GetToBlockOk returns a tuple with the ToBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputGetLogs) GetToBlockOk() (*string, bool) {
	if o == nil || IsNil(o.ToBlock) {
		return nil, false
	}
	return o.ToBlock, true
}

// HasToBlock returns a boolean if a field has been set.
func (o *InputGetLogs) HasToBlock() bool {
	if o != nil && !IsNil(o.ToBlock) {
		return true
	}

	return false
}

// SetToBlock gets a reference to the given string and assigns it to the ToBlock field.
func (o *InputGetLogs) SetToBlock(v string) {
	o.ToBlock = &v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *InputGetLogs) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputGetLogs) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *InputGetLogs) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *InputGetLogs) SetTopics(v []string) {
	o.Topics = v
}

func (o InputGetLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputGetLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	if !IsNil(o.Address) {
		toSerialize["Address"] = o.Address
	}
	if !IsNil(o.BlockHash) {
		toSerialize["BlockHash"] = o.BlockHash
	}
	if !IsNil(o.FromBlock) {
		toSerialize["FromBlock"] = o.FromBlock
	}
	if !IsNil(o.ToBlock) {
		toSerialize["ToBlock"] = o.ToBlock
	}
	if !IsNil(o.Topics) {
		toSerialize["Topics"] = o.Topics
	}
	return toSerialize, nil
}

type NullableInputGetLogs struct {
	value *InputGetLogs
	isSet bool
}

func (v NullableInputGetLogs) Get() *InputGetLogs {
	return v.value
}

func (v *NullableInputGetLogs) Set(val *InputGetLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableInputGetLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableInputGetLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputGetLogs(val *InputGetLogs) *NullableInputGetLogs {
	return &NullableInputGetLogs{value: val, isSet: true}
}

func (v NullableInputGetLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputGetLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


