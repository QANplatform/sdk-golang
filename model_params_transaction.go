/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParamsTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParamsTransaction{}

// ParamsTransaction struct for ParamsTransaction
type ParamsTransaction struct {
	// The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.
	Data *string `json:"Data,omitempty"`
	// The address from which the transaction is sent
	From *string `json:"From,omitempty"`
	// The integer of gas provided for the transaction execution
	Gas *string `json:"Gas,omitempty"`
	// The integer of gasPrice used for each paid gas encoded as hexadecimal
	GasPrice *string `json:"GasPrice,omitempty"`
	// The address to which the transaction is addressed
	To string `json:"To"`
	// The integer of value sent with this transaction encoded as hexadecimal
	Value *string `json:"Value,omitempty"`
}

type _ParamsTransaction ParamsTransaction

// NewParamsTransaction instantiates a new ParamsTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParamsTransaction(to string) *ParamsTransaction {
	this := ParamsTransaction{}
	this.To = to
	return &this
}

// NewParamsTransactionWithDefaults instantiates a new ParamsTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParamsTransactionWithDefaults() *ParamsTransaction {
	this := ParamsTransaction{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ParamsTransaction) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsTransaction) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ParamsTransaction) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ParamsTransaction) SetData(v string) {
	o.Data = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ParamsTransaction) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsTransaction) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ParamsTransaction) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ParamsTransaction) SetFrom(v string) {
	o.From = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *ParamsTransaction) GetGas() string {
	if o == nil || IsNil(o.Gas) {
		var ret string
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsTransaction) GetGasOk() (*string, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *ParamsTransaction) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given string and assigns it to the Gas field.
func (o *ParamsTransaction) SetGas(v string) {
	o.Gas = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *ParamsTransaction) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsTransaction) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *ParamsTransaction) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *ParamsTransaction) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetTo returns the To field value
func (o *ParamsTransaction) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *ParamsTransaction) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *ParamsTransaction) SetTo(v string) {
	o.To = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ParamsTransaction) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsTransaction) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ParamsTransaction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ParamsTransaction) SetValue(v string) {
	o.Value = &v
}

func (o ParamsTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParamsTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["Data"] = o.Data
	}
	if !IsNil(o.From) {
		toSerialize["From"] = o.From
	}
	if !IsNil(o.Gas) {
		toSerialize["Gas"] = o.Gas
	}
	if !IsNil(o.GasPrice) {
		toSerialize["GasPrice"] = o.GasPrice
	}
	toSerialize["To"] = o.To
	if !IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	return toSerialize, nil
}

func (o *ParamsTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"To",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParamsTransaction := _ParamsTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParamsTransaction)

	if err != nil {
		return err
	}

	*o = ParamsTransaction(varParamsTransaction)

	return err
}

type NullableParamsTransaction struct {
	value *ParamsTransaction
	isSet bool
}

func (v NullableParamsTransaction) Get() *ParamsTransaction {
	return v.value
}

func (v *NullableParamsTransaction) Set(val *ParamsTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableParamsTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableParamsTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamsTransaction(val *ParamsTransaction) *NullableParamsTransaction {
	return &NullableParamsTransaction{value: val, isSet: true}
}

func (v NullableParamsTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamsTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


