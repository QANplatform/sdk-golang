/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputGasPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputGasPrice{}

// OutputGasPrice struct for OutputGasPrice
type OutputGasPrice struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// The decimal value of the current gas price in wei
	GasPrice string `json:"GasPrice"`
}

type _OutputGasPrice OutputGasPrice

// NewOutputGasPrice instantiates a new OutputGasPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputGasPrice(gasPrice string) *OutputGasPrice {
	this := OutputGasPrice{}
	this.GasPrice = gasPrice
	return &this
}

// NewOutputGasPriceWithDefaults instantiates a new OutputGasPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputGasPriceWithDefaults() *OutputGasPrice {
	this := OutputGasPrice{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *OutputGasPrice) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputGasPrice) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *OutputGasPrice) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *OutputGasPrice) SetSchema(v string) {
	o.Schema = &v
}

// GetGasPrice returns the GasPrice field value
func (o *OutputGasPrice) GetGasPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value
// and a boolean to check if the value has been set.
func (o *OutputGasPrice) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasPrice, true
}

// SetGasPrice sets field value
func (o *OutputGasPrice) SetGasPrice(v string) {
	o.GasPrice = v
}

func (o OutputGasPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputGasPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["GasPrice"] = o.GasPrice
	return toSerialize, nil
}

func (o *OutputGasPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"GasPrice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputGasPrice := _OutputGasPrice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputGasPrice)

	if err != nil {
		return err
	}

	*o = OutputGasPrice(varOutputGasPrice)

	return err
}

type NullableOutputGasPrice struct {
	value *OutputGasPrice
	isSet bool
}

func (v NullableOutputGasPrice) Get() *OutputGasPrice {
	return v.value
}

func (v *NullableOutputGasPrice) Set(val *OutputGasPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputGasPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputGasPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputGasPrice(val *OutputGasPrice) *NullableOutputGasPrice {
	return &NullableOutputGasPrice{value: val, isSet: true}
}

func (v NullableOutputGasPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputGasPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


