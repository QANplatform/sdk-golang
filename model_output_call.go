/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputCall{}

// OutputCall struct for OutputCall
type OutputCall struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// The return value of the executed contract method
	Data string `json:"Data"`
}

type _OutputCall OutputCall

// NewOutputCall instantiates a new OutputCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputCall(data string) *OutputCall {
	this := OutputCall{}
	this.Data = data
	return &this
}

// NewOutputCallWithDefaults instantiates a new OutputCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputCallWithDefaults() *OutputCall {
	this := OutputCall{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *OutputCall) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputCall) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *OutputCall) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *OutputCall) SetSchema(v string) {
	o.Schema = &v
}

// GetData returns the Data field value
func (o *OutputCall) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *OutputCall) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *OutputCall) SetData(v string) {
	o.Data = v
}

func (o OutputCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["Data"] = o.Data
	return toSerialize, nil
}

func (o *OutputCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputCall := _OutputCall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputCall)

	if err != nil {
		return err
	}

	*o = OutputCall(varOutputCall)

	return err
}

type NullableOutputCall struct {
	value *OutputCall
	isSet bool
}

func (v NullableOutputCall) Get() *OutputCall {
	return v.value
}

func (v *NullableOutputCall) Set(val *OutputCall) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputCall) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputCall(val *OutputCall) *NullableOutputCall {
	return &NullableOutputCall{value: val, isSet: true}
}

func (v NullableOutputCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


