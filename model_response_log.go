/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseLog{}

// ResponseLog struct for ResponseLog
type ResponseLog struct {
	// An address from which this log originated
	Address string `json:"Address"`
	// The hash of the block where this log was in. null when its a pending log
	BlockHash NullableString `json:"BlockHash"`
	// The block number where this log was in. null when its a pending log
	BlockNumber NullableString `json:"BlockNumber"`
	// It contains one or more 32 Bytes non-indexed arguments of the log
	Data string `json:"Data"`
	// The integer of the log index position in the block. null when its a pending log
	LogIndex NullableString `json:"LogIndex"`
	// It is true when the log was removed due to a chain reorganization, and false if it's a valid log
	Removed bool `json:"Removed"`
	// An array of zero to four 32 Bytes DATA of indexed log arguments. In Solidity, the first topic is the hash of the signature of the event (e.g. Deposit(address, bytes32, uint256)), except you declare the event with the anonymous specifier
	Topics []string `json:"Topics"`
	// The hash of the transactions this log was created from. null when its a pending log
	TransactionHash NullableString `json:"TransactionHash"`
	// The integer of the transaction's index position that the log was created from. null when it's a pending log
	TransactionIndex NullableString `json:"TransactionIndex"`
}

type _ResponseLog ResponseLog

// NewResponseLog instantiates a new ResponseLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseLog(address string, blockHash NullableString, blockNumber NullableString, data string, logIndex NullableString, removed bool, topics []string, transactionHash NullableString, transactionIndex NullableString) *ResponseLog {
	this := ResponseLog{}
	this.Address = address
	this.BlockHash = blockHash
	this.BlockNumber = blockNumber
	this.Data = data
	this.LogIndex = logIndex
	this.Removed = removed
	this.Topics = topics
	this.TransactionHash = transactionHash
	this.TransactionIndex = transactionIndex
	return &this
}

// NewResponseLogWithDefaults instantiates a new ResponseLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseLogWithDefaults() *ResponseLog {
	this := ResponseLog{}
	return &this
}

// GetAddress returns the Address field value
func (o *ResponseLog) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *ResponseLog) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *ResponseLog) SetAddress(v string) {
	o.Address = v
}

// GetBlockHash returns the BlockHash field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLog) GetBlockHash() string {
	if o == nil || o.BlockHash.Get() == nil {
		var ret string
		return ret
	}

	return *o.BlockHash.Get()
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLog) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockHash.Get(), o.BlockHash.IsSet()
}

// SetBlockHash sets field value
func (o *ResponseLog) SetBlockHash(v string) {
	o.BlockHash.Set(&v)
}

// GetBlockNumber returns the BlockNumber field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLog) GetBlockNumber() string {
	if o == nil || o.BlockNumber.Get() == nil {
		var ret string
		return ret
	}

	return *o.BlockNumber.Get()
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLog) GetBlockNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockNumber.Get(), o.BlockNumber.IsSet()
}

// SetBlockNumber sets field value
func (o *ResponseLog) SetBlockNumber(v string) {
	o.BlockNumber.Set(&v)
}

// GetData returns the Data field value
func (o *ResponseLog) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ResponseLog) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ResponseLog) SetData(v string) {
	o.Data = v
}

// GetLogIndex returns the LogIndex field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLog) GetLogIndex() string {
	if o == nil || o.LogIndex.Get() == nil {
		var ret string
		return ret
	}

	return *o.LogIndex.Get()
}

// GetLogIndexOk returns a tuple with the LogIndex field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLog) GetLogIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogIndex.Get(), o.LogIndex.IsSet()
}

// SetLogIndex sets field value
func (o *ResponseLog) SetLogIndex(v string) {
	o.LogIndex.Set(&v)
}

// GetRemoved returns the Removed field value
func (o *ResponseLog) GetRemoved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *ResponseLog) GetRemovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Removed, true
}

// SetRemoved sets field value
func (o *ResponseLog) SetRemoved(v bool) {
	o.Removed = v
}

// GetTopics returns the Topics field value
func (o *ResponseLog) GetTopics() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value
// and a boolean to check if the value has been set.
func (o *ResponseLog) GetTopicsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topics, true
}

// SetTopics sets field value
func (o *ResponseLog) SetTopics(v []string) {
	o.Topics = v
}

// GetTransactionHash returns the TransactionHash field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLog) GetTransactionHash() string {
	if o == nil || o.TransactionHash.Get() == nil {
		var ret string
		return ret
	}

	return *o.TransactionHash.Get()
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLog) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionHash.Get(), o.TransactionHash.IsSet()
}

// SetTransactionHash sets field value
func (o *ResponseLog) SetTransactionHash(v string) {
	o.TransactionHash.Set(&v)
}

// GetTransactionIndex returns the TransactionIndex field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLog) GetTransactionIndex() string {
	if o == nil || o.TransactionIndex.Get() == nil {
		var ret string
		return ret
	}

	return *o.TransactionIndex.Get()
}

// GetTransactionIndexOk returns a tuple with the TransactionIndex field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLog) GetTransactionIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionIndex.Get(), o.TransactionIndex.IsSet()
}

// SetTransactionIndex sets field value
func (o *ResponseLog) SetTransactionIndex(v string) {
	o.TransactionIndex.Set(&v)
}

func (o ResponseLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Address"] = o.Address
	toSerialize["BlockHash"] = o.BlockHash.Get()
	toSerialize["BlockNumber"] = o.BlockNumber.Get()
	toSerialize["Data"] = o.Data
	toSerialize["LogIndex"] = o.LogIndex.Get()
	toSerialize["Removed"] = o.Removed
	toSerialize["Topics"] = o.Topics
	toSerialize["TransactionHash"] = o.TransactionHash.Get()
	toSerialize["TransactionIndex"] = o.TransactionIndex.Get()
	return toSerialize, nil
}

func (o *ResponseLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Address",
		"BlockHash",
		"BlockNumber",
		"Data",
		"LogIndex",
		"Removed",
		"Topics",
		"TransactionHash",
		"TransactionIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseLog := _ResponseLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseLog)

	if err != nil {
		return err
	}

	*o = ResponseLog(varResponseLog)

	return err
}

type NullableResponseLog struct {
	value *ResponseLog
	isSet bool
}

func (v NullableResponseLog) Get() *ResponseLog {
	return v.value
}

func (v *NullableResponseLog) Set(val *ResponseLog) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseLog) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseLog(val *ResponseLog) *NullableResponseLog {
	return &NullableResponseLog{value: val, isSet: true}
}

func (v NullableResponseLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


