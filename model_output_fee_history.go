/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputFeeHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputFeeHistory{}

// OutputFeeHistory struct for OutputFeeHistory
type OutputFeeHistory struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks
	BaseFeePerGas []string `json:"BaseFeePerGas"`
	// An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
	GasUsedRatio []float64 `json:"GasUsedRatio"`
	// The lowest number block of the returned range encoded in decimal format
	OldestBlock string `json:"OldestBlock"`
	// An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty
	Reward [][]string `json:"Reward"`
}

type _OutputFeeHistory OutputFeeHistory

// NewOutputFeeHistory instantiates a new OutputFeeHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputFeeHistory(baseFeePerGas []string, gasUsedRatio []float64, oldestBlock string, reward [][]string) *OutputFeeHistory {
	this := OutputFeeHistory{}
	this.BaseFeePerGas = baseFeePerGas
	this.GasUsedRatio = gasUsedRatio
	this.OldestBlock = oldestBlock
	this.Reward = reward
	return &this
}

// NewOutputFeeHistoryWithDefaults instantiates a new OutputFeeHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputFeeHistoryWithDefaults() *OutputFeeHistory {
	this := OutputFeeHistory{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *OutputFeeHistory) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputFeeHistory) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *OutputFeeHistory) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *OutputFeeHistory) SetSchema(v string) {
	o.Schema = &v
}

// GetBaseFeePerGas returns the BaseFeePerGas field value
func (o *OutputFeeHistory) GetBaseFeePerGas() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseFeePerGas
}

// GetBaseFeePerGasOk returns a tuple with the BaseFeePerGas field value
// and a boolean to check if the value has been set.
func (o *OutputFeeHistory) GetBaseFeePerGasOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseFeePerGas, true
}

// SetBaseFeePerGas sets field value
func (o *OutputFeeHistory) SetBaseFeePerGas(v []string) {
	o.BaseFeePerGas = v
}

// GetGasUsedRatio returns the GasUsedRatio field value
func (o *OutputFeeHistory) GetGasUsedRatio() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.GasUsedRatio
}

// GetGasUsedRatioOk returns a tuple with the GasUsedRatio field value
// and a boolean to check if the value has been set.
func (o *OutputFeeHistory) GetGasUsedRatioOk() ([]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasUsedRatio, true
}

// SetGasUsedRatio sets field value
func (o *OutputFeeHistory) SetGasUsedRatio(v []float64) {
	o.GasUsedRatio = v
}

// GetOldestBlock returns the OldestBlock field value
func (o *OutputFeeHistory) GetOldestBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldestBlock
}

// GetOldestBlockOk returns a tuple with the OldestBlock field value
// and a boolean to check if the value has been set.
func (o *OutputFeeHistory) GetOldestBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldestBlock, true
}

// SetOldestBlock sets field value
func (o *OutputFeeHistory) SetOldestBlock(v string) {
	o.OldestBlock = v
}

// GetReward returns the Reward field value
func (o *OutputFeeHistory) GetReward() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.Reward
}

// GetRewardOk returns a tuple with the Reward field value
// and a boolean to check if the value has been set.
func (o *OutputFeeHistory) GetRewardOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reward, true
}

// SetReward sets field value
func (o *OutputFeeHistory) SetReward(v [][]string) {
	o.Reward = v
}

func (o OutputFeeHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputFeeHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["BaseFeePerGas"] = o.BaseFeePerGas
	toSerialize["GasUsedRatio"] = o.GasUsedRatio
	toSerialize["OldestBlock"] = o.OldestBlock
	toSerialize["Reward"] = o.Reward
	return toSerialize, nil
}

func (o *OutputFeeHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"BaseFeePerGas",
		"GasUsedRatio",
		"OldestBlock",
		"Reward",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputFeeHistory := _OutputFeeHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputFeeHistory)

	if err != nil {
		return err
	}

	*o = OutputFeeHistory(varOutputFeeHistory)

	return err
}

type NullableOutputFeeHistory struct {
	value *OutputFeeHistory
	isSet bool
}

func (v NullableOutputFeeHistory) Get() *OutputFeeHistory {
	return v.value
}

func (v *NullableOutputFeeHistory) Set(val *OutputFeeHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputFeeHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputFeeHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputFeeHistory(val *OutputFeeHistory) *NullableOutputFeeHistory {
	return &NullableOutputFeeHistory{value: val, isSet: true}
}

func (v NullableOutputFeeHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputFeeHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


