/*
QAN AutoApi

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputSendRawTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputSendRawTransaction{}

// OutputSendRawTransaction struct for OutputSendRawTransaction
type OutputSendRawTransaction struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	// The transaction hash, or the zero hash if the transaction is not yet available
	TransactionHash string `json:"TransactionHash"`
}

type _OutputSendRawTransaction OutputSendRawTransaction

// NewOutputSendRawTransaction instantiates a new OutputSendRawTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputSendRawTransaction(transactionHash string) *OutputSendRawTransaction {
	this := OutputSendRawTransaction{}
	this.TransactionHash = transactionHash
	return &this
}

// NewOutputSendRawTransactionWithDefaults instantiates a new OutputSendRawTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputSendRawTransactionWithDefaults() *OutputSendRawTransaction {
	this := OutputSendRawTransaction{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *OutputSendRawTransaction) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputSendRawTransaction) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *OutputSendRawTransaction) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *OutputSendRawTransaction) SetSchema(v string) {
	o.Schema = &v
}

// GetTransactionHash returns the TransactionHash field value
func (o *OutputSendRawTransaction) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *OutputSendRawTransaction) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *OutputSendRawTransaction) SetTransactionHash(v string) {
	o.TransactionHash = v
}

func (o OutputSendRawTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputSendRawTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["TransactionHash"] = o.TransactionHash
	return toSerialize, nil
}

func (o *OutputSendRawTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"TransactionHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputSendRawTransaction := _OutputSendRawTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputSendRawTransaction)

	if err != nil {
		return err
	}

	*o = OutputSendRawTransaction(varOutputSendRawTransaction)

	return err
}

type NullableOutputSendRawTransaction struct {
	value *OutputSendRawTransaction
	isSet bool
}

func (v NullableOutputSendRawTransaction) Get() *OutputSendRawTransaction {
	return v.value
}

func (v *NullableOutputSendRawTransaction) Set(val *OutputSendRawTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputSendRawTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputSendRawTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputSendRawTransaction(val *OutputSendRawTransaction) *NullableOutputSendRawTransaction {
	return &NullableOutputSendRawTransaction{value: val, isSet: true}
}

func (v NullableOutputSendRawTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputSendRawTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


